#include <stdio.h>
#include <stdlib.h>
#define N 10



int somme(int *t, int n, int i) //méthode écrite dans le tp
{
    int res=0;
    printf("Calcul de la somme a partir de l'indice %d \n", i);
    if (i<n)
    {
        printf("`\t appel du calcul de la somme a partir de l'indice %d : \n", i+1);
        res=t[i]+somme(t,n,i+1);
        printf("\t addition avec t[%d] \n", i);
    }
     printf("\t somme a partir de l'indice %d = %d \n",i,res);
    return res;
}


void affichage(int *t, int n, int i)
{
    if( i<= n)
    {
        printf("%d \n", t[i]);
        affichage(t,n,i+1);
    }

}

int somme_recursive(int *t, int n)
{
    if( n == 0)
    {
        return t[0];
    }
    else
    {
        return t[n]+somme_recursive(t,n-1);
    }
}

int superieurValeur(int *t, int n, int v)
{
    if( n == 0)
    {
        return 0;
    }
        if(t[n]>v)
        {
            return 1+superieurValeur(t,n-1,v);
        }
        else
        {
            return 0+superieurValeur(t,n-1,v);
        }
}

void affichageTabDecroissant(int *t, int n)
{
    if( n >= 0)
    {
        printf("%d \n", t[n]);
        affichageTabDecroissant(t,n-1);
    }
}

int recherche(int  *t, int n, int v)
{
    if(n < 0)
    {
        return -1;

    }
        if(t[n]==v)
        {
            return n;

        }
        else
        {
         return recherche(t,n-1,v);
        }
}

int dicho(Tab t, int c, int g, int d, int * r) //il faut que le tableau soit trié
{
    triTableau(t,d);
    int ret= g + (d-g)/2;
    if (t[ret] == c)
    {
        *r=ret;
        return *r;
    }
    else
    {
        if(t[ret] > c)
        {
             dicho(t,c,g,ret,r); // ou return dicho
        }
        else
        {

            if(t[ret] < c)
            {
                 dicho(t,c,ret,d,r);
            }
            else
            {
                return -1;
            }
        }
    }
    return;
}
